{"version":3,"sources":["components/Card.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["Cards","month","date","year","day","icon","description","tempHigh","tempLow","humidity","windspeed","className","src","alt","Header","location","city","App","API_Key","process","useState","timezone","setTimeZone","oDailyForcast","oSetDailyForcast","search","setSearch","query","setQuery","setDay","useEffect","getGeoLocal","a","navigator","geolocation","getCurrentPosition","showPosition","alert","position","console","log","defaultLon","coords","longitude","defaultLat","latitude","fetch","response","json","data","daily","getDay","getWeather","geoResponse","geoData","coord","searchLon","lon","searchLat","lat","searchResponse","searchData","oEvent","onSubmit","preventDefault","type","placeholder","value","onChange","target","map","forcast","Card","key","Date","dt","getUTCDate","getUTCMonth","getUTCFullYear","weather","temp","max","min","wind_speed","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6ebd1cf3.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Cards = ({\r\n  month,\r\n  date,\r\n  year,\r\n  day,\r\n  icon,\r\n  description,\r\n  tempHigh,\r\n  tempLow,\r\n  humidity,\r\n  windspeed,\r\n}) => {\r\n  return (\r\n    <div className=\"Card\">\r\n      <div className=\"CompleteDate\">\r\n        <h3>{day}</h3>\r\n        <h6>\r\n          {month}/{date}/{year}\r\n        </h6>\r\n      </div>\r\n        <img className=\"city-icon\" src={`http://openweathermap.org/img/wn/${icon}@2x.png`} alt={description}></img>\r\n      <h4>{description}</h4>\r\n      <h4>\r\n        High: {tempHigh} / Low: {tempLow}{\" \"}\r\n      </h4>\r\n      <h4>Humidity: {humidity}</h4>\r\n      <h4>WindSpeed: {windspeed}</h4>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cards;\r\n","import React from \"react\";\r\n\r\nconst Header = ({location, city}) => {\r\n  return (\r\n    <div className=\"Header\">\r\n      <h3>{location}</h3>\r\n      <h3>Timezone: {city}</h3>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Card from \"./components/Card\";\nimport Header from \"./components/Header\";\n\nfunction App() {\n  //Write JS here\n  // const API_Key = \"7b3b2d5f9d5c4a7f1c81f387dac726f4\";\n  const API_Key = process.env.REACT_APP_WEATHER_KEY;\n\n\n  // Example of UseState\n  const [timezone, setTimeZone] = useState(\"\");\n  const [oDailyForcast, oSetDailyForcast] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState(\"\");\n  const [day, setDay] = useState(\"\");\n\n  //UseEffects\n  useEffect(() => {\n    getGeoLocal();\n  }, []);\n\n  //Functions\n  const getGeoLocal = async () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(showPosition);\n    } else {\n      alert(\"Geolocation is not supported by this browser.\");\n    }\n  };\n  const showPosition = async (position) => {\n    console.log(position);\n    const defaultLon = position.coords.longitude;\n    const defaultLat = position.coords.latitude;\n    const response = await fetch(\n      `https://api.openweathermap.org/data/2.5/onecall?lat=${defaultLat}&lon=${defaultLon}&\n      exclude=hourly,minutely&units=imperial&appid=${API_Key}`\n    );\n    const data = await response.json();\n\n    oSetDailyForcast(data.daily);\n    setTimeZone(data.timezone);\n    getDay();\n  };\n\n  const getWeather = async () => {\n    const geoResponse = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=${query}&units=imperial&appid=${API_Key}`\n    );\n    const geoData = await geoResponse.json();\n\n    if (geoData.coord) {\n      let searchLon = geoData.coord.lon;\n      let searchLat = geoData.coord.lat;\n\n      const searchResponse = await fetch(\n        `https://api.openweathermap.org/data/2.5/onecall?lat=${searchLat}&lon=${searchLon}&\n          exclude=hourly,minutely&units=imperial&appid=${API_Key}`\n      );\n      const searchData = await searchResponse.json();\n\n      oSetDailyForcast(searchData.daily);\n      setTimeZone(searchData.timezone);\n      getDay();\n    }\n  };\n\n  const updateSearch = (oEvent) => {\n    setSearch(oEvent.target.value);\n    getWeather();\n  };\n\n  const getSearch = (oEvent) => {\n    oEvent.preventDefault();\n    setQuery(search);\n    getWeather();\n  };\n\n  const getDay = (oEvent) => {\n    const days = [\n      \"Sunday\",\n      \"Monday\",\n      \"Tuesday\",\n      \"Wednesday\",\n      \"Thursday\",\n      \"Friday\",\n      \"Saturday\",\n    ];\n    setDay(days);\n  };\n\n  //Return JSX\n  return (\n    <div className=\"App\">\n      <form onSubmit={getSearch} className=\"search-form\">\n        <input\n          className=\"search-bar\"\n          type=\"text\"\n          placeholder=\"City Name\"\n          value={search}\n          onChange={updateSearch}\n        />\n        <button className=\"search-btn\" type=\"submit\">\n          <strong>Get Weather</strong>\n        </button>\n      </form>\n      <Header location={query} city={timezone} />\n      <div className=\"CardHolder\">\n        {oDailyForcast.map((forcast) => (\n          <Card\n            key={new Date(forcast.dt * 1000).getUTCDate()}\n            day={day[new Date(forcast.dt * 1000).getDay()]}\n            month={new Date(forcast.dt * 1000).getUTCMonth()}\n            date={new Date(forcast.dt * 1000).getUTCDate()}\n            year={new Date(forcast.dt * 1000).getUTCFullYear()}\n            description={forcast.weather[0].description}\n            icon={forcast.weather[0].icon}\n            tempHigh={forcast.temp.max}\n            tempLow={forcast.temp.min}\n            humidity={forcast.humidity}\n            windspeed={forcast.wind_speed}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}